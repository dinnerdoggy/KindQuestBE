// <auto-generated />
using System;
using KindQuest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KindQuestBE.Migrations
{
    [DbContext(typeof(KindQuestDbContext))]
    [Migration("20250422233936_RemovedUnecessaryProperty")]
    partial class RemovedUnecessaryProperty
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KindQuest.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .HasColumnType("text");

                    b.Property<string>("JobName")
                        .HasColumnType("text");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Jobs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCompleted = new DateTime(2025, 4, 23, 23, 39, 36, 310, DateTimeKind.Utc).AddTicks(9751),
                            DatePosted = new DateTime(2025, 4, 22, 23, 39, 36, 310, DateTimeKind.Utc).AddTicks(9751),
                            IsCompleted = false,
                            JobDescription = "Collect litter from the ground.",
                            JobName = "Pick up trash",
                            ProjectId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KindQuest.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePosted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProjectImg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCompleted = new DateTime(2025, 4, 27, 23, 39, 36, 310, DateTimeKind.Utc).AddTicks(9715),
                            DatePosted = new DateTime(2025, 4, 22, 23, 39, 36, 310, DateTimeKind.Utc).AddTicks(9711),
                            IsCompleted = false,
                            Location = "Central Park",
                            ProjectDescription = "Help clean up the local park.",
                            ProjectImg = "https://example.com/cleanup.jpg",
                            ProjectName = "Neighborhood Cleanup",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("KindQuest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("EmergencyContact")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("ProfilePic")
                        .HasColumnType("text");

                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alex@example.com",
                            EmergencyContact = 1234567890L,
                            FirstName = "Alex",
                            LastName = "Smith",
                            ProfilePic = "https://example.com/alex.jpg",
                            Uid = "abc123"
                        });
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("VolunteeredProjectsId")
                        .HasColumnType("integer");

                    b.Property<int>("VolunteersId")
                        .HasColumnType("integer");

                    b.HasKey("VolunteeredProjectsId", "VolunteersId");

                    b.HasIndex("VolunteersId");

                    b.ToTable("UserProjects", (string)null);
                });

            modelBuilder.Entity("KindQuest.Models.Job", b =>
                {
                    b.HasOne("KindQuest.Models.Project", "Project")
                        .WithMany("Jobs")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KindQuest.Models.User", "User")
                        .WithMany("Jobs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KindQuest.Models.Project", b =>
                {
                    b.HasOne("KindQuest.Models.User", "Creator")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("KindQuest.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("VolunteeredProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KindQuest.Models.User", null)
                        .WithMany()
                        .HasForeignKey("VolunteersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KindQuest.Models.Project", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("KindQuest.Models.User", b =>
                {
                    b.Navigation("CreatedProjects");

                    b.Navigation("Jobs");
                });
#pragma warning restore 612, 618
        }
    }
}
